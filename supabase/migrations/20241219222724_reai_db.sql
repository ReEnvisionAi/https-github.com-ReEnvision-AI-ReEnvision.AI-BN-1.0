create table "public"."app_categories" (
    "app_id" uuid not null default gen_random_uuid(),
    "category_id" bigint not null
);


alter table "public"."app_categories" enable row level security;

create table "public"."categories" (
    "id" bigint generated by default as identity not null,
    "name" text not null
);


alter table "public"."categories" enable row level security;

create table "public"."installable_apps" (
    "id" uuid not null default gen_random_uuid(),
    "name" text not null,
    "icon" text not null,
    "preferred_width" integer default 600,
    "preferred_height" integer default 800,
    "min_width" integer default 300,
    "min_height" integer default 400,
    "created_at" timestamp with time zone default now(),
    "url" text not null,
    "description" text default ''::text,
    "screenshots" text[]
);


alter table "public"."installable_apps" enable row level security;

create table "public"."profiles" (
    "id" uuid not null,
    "first_name" text,
    "last_name" text,
    "email" text
);


alter table "public"."profiles" enable row level security;

create table "public"."user_apps" (
    "user_id" uuid not null default gen_random_uuid(),
    "app_id" uuid not null default gen_random_uuid()
);


alter table "public"."user_apps" enable row level security;

CREATE UNIQUE INDEX app_categories_pkey ON public.app_categories USING btree (app_id, category_id);

CREATE UNIQUE INDEX categories_name_key ON public.categories USING btree (name);

CREATE UNIQUE INDEX categories_pkey ON public.categories USING btree (id);

CREATE UNIQUE INDEX installable_apps_pkey ON public.installable_apps USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

CREATE UNIQUE INDEX user_apps_pkey ON public.user_apps USING btree (user_id, app_id);

alter table "public"."app_categories" add constraint "app_categories_pkey" PRIMARY KEY using index "app_categories_pkey";

alter table "public"."categories" add constraint "categories_pkey" PRIMARY KEY using index "categories_pkey";

alter table "public"."installable_apps" add constraint "installable_apps_pkey" PRIMARY KEY using index "installable_apps_pkey";

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."user_apps" add constraint "user_apps_pkey" PRIMARY KEY using index "user_apps_pkey";

alter table "public"."app_categories" add constraint "app_categories_app_id_fkey" FOREIGN KEY (app_id) REFERENCES installable_apps(id) ON DELETE CASCADE not valid;

alter table "public"."app_categories" validate constraint "app_categories_app_id_fkey";

alter table "public"."app_categories" add constraint "app_categories_app_id_fkey1" FOREIGN KEY (app_id) REFERENCES installable_apps(id) ON DELETE CASCADE not valid;

alter table "public"."app_categories" validate constraint "app_categories_app_id_fkey1";

alter table "public"."app_categories" add constraint "app_categories_category_id_fkey" FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE CASCADE not valid;

alter table "public"."app_categories" validate constraint "app_categories_category_id_fkey";

alter table "public"."app_categories" add constraint "app_categories_category_id_fkey1" FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE CASCADE not valid;

alter table "public"."app_categories" validate constraint "app_categories_category_id_fkey1";

alter table "public"."categories" add constraint "categories_name_key" UNIQUE using index "categories_name_key";

alter table "public"."profiles" add constraint "profiles_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."profiles" validate constraint "profiles_id_fkey";

alter table "public"."user_apps" add constraint "user_apps_app_id_fkey" FOREIGN KEY (app_id) REFERENCES installable_apps(id) ON DELETE CASCADE not valid;

alter table "public"."user_apps" validate constraint "user_apps_app_id_fkey";

alter table "public"."user_apps" add constraint "user_apps_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE not valid;

alter table "public"."user_apps" validate constraint "user_apps_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$begin
  insert into public.profiles (id, first_name, last_name, email)
  values (new.id, new.raw_user_meta_data ->> 'first_name', new.raw_user_meta_data ->> 'last_name', new.email);
  return new;
end;$function$
;

create or replace trigger on_auth_user_created
after insert on auth.users for each row
execute procedure public.handle_new_user ();

grant delete on table "public"."app_categories" to "anon";

grant insert on table "public"."app_categories" to "anon";

grant references on table "public"."app_categories" to "anon";

grant select on table "public"."app_categories" to "anon";

grant trigger on table "public"."app_categories" to "anon";

grant truncate on table "public"."app_categories" to "anon";

grant update on table "public"."app_categories" to "anon";

grant delete on table "public"."app_categories" to "authenticated";

grant insert on table "public"."app_categories" to "authenticated";

grant references on table "public"."app_categories" to "authenticated";

grant select on table "public"."app_categories" to "authenticated";

grant trigger on table "public"."app_categories" to "authenticated";

grant truncate on table "public"."app_categories" to "authenticated";

grant update on table "public"."app_categories" to "authenticated";

grant delete on table "public"."app_categories" to "service_role";

grant insert on table "public"."app_categories" to "service_role";

grant references on table "public"."app_categories" to "service_role";

grant select on table "public"."app_categories" to "service_role";

grant trigger on table "public"."app_categories" to "service_role";

grant truncate on table "public"."app_categories" to "service_role";

grant update on table "public"."app_categories" to "service_role";

grant delete on table "public"."categories" to "anon";

grant insert on table "public"."categories" to "anon";

grant references on table "public"."categories" to "anon";

grant select on table "public"."categories" to "anon";

grant trigger on table "public"."categories" to "anon";

grant truncate on table "public"."categories" to "anon";

grant update on table "public"."categories" to "anon";

grant delete on table "public"."categories" to "authenticated";

grant insert on table "public"."categories" to "authenticated";

grant references on table "public"."categories" to "authenticated";

grant select on table "public"."categories" to "authenticated";

grant trigger on table "public"."categories" to "authenticated";

grant truncate on table "public"."categories" to "authenticated";

grant update on table "public"."categories" to "authenticated";

grant delete on table "public"."categories" to "service_role";

grant insert on table "public"."categories" to "service_role";

grant references on table "public"."categories" to "service_role";

grant select on table "public"."categories" to "service_role";

grant trigger on table "public"."categories" to "service_role";

grant truncate on table "public"."categories" to "service_role";

grant update on table "public"."categories" to "service_role";

grant delete on table "public"."installable_apps" to "anon";

grant insert on table "public"."installable_apps" to "anon";

grant references on table "public"."installable_apps" to "anon";

grant select on table "public"."installable_apps" to "anon";

grant trigger on table "public"."installable_apps" to "anon";

grant truncate on table "public"."installable_apps" to "anon";

grant update on table "public"."installable_apps" to "anon";

grant delete on table "public"."installable_apps" to "authenticated";

grant insert on table "public"."installable_apps" to "authenticated";

grant references on table "public"."installable_apps" to "authenticated";

grant select on table "public"."installable_apps" to "authenticated";

grant trigger on table "public"."installable_apps" to "authenticated";

grant truncate on table "public"."installable_apps" to "authenticated";

grant update on table "public"."installable_apps" to "authenticated";

grant delete on table "public"."installable_apps" to "service_role";

grant insert on table "public"."installable_apps" to "service_role";

grant references on table "public"."installable_apps" to "service_role";

grant select on table "public"."installable_apps" to "service_role";

grant trigger on table "public"."installable_apps" to "service_role";

grant truncate on table "public"."installable_apps" to "service_role";

grant update on table "public"."installable_apps" to "service_role";

grant delete on table "public"."profiles" to "anon";

grant insert on table "public"."profiles" to "anon";

grant references on table "public"."profiles" to "anon";

grant select on table "public"."profiles" to "anon";

grant trigger on table "public"."profiles" to "anon";

grant truncate on table "public"."profiles" to "anon";

grant update on table "public"."profiles" to "anon";

grant delete on table "public"."profiles" to "authenticated";

grant insert on table "public"."profiles" to "authenticated";

grant references on table "public"."profiles" to "authenticated";

grant select on table "public"."profiles" to "authenticated";

grant trigger on table "public"."profiles" to "authenticated";

grant truncate on table "public"."profiles" to "authenticated";

grant update on table "public"."profiles" to "authenticated";

grant delete on table "public"."profiles" to "service_role";

grant insert on table "public"."profiles" to "service_role";

grant references on table "public"."profiles" to "service_role";

grant select on table "public"."profiles" to "service_role";

grant trigger on table "public"."profiles" to "service_role";

grant truncate on table "public"."profiles" to "service_role";

grant update on table "public"."profiles" to "service_role";

grant delete on table "public"."user_apps" to "anon";

grant insert on table "public"."user_apps" to "anon";

grant references on table "public"."user_apps" to "anon";

grant select on table "public"."user_apps" to "anon";

grant trigger on table "public"."user_apps" to "anon";

grant truncate on table "public"."user_apps" to "anon";

grant update on table "public"."user_apps" to "anon";

grant delete on table "public"."user_apps" to "authenticated";

grant insert on table "public"."user_apps" to "authenticated";

grant references on table "public"."user_apps" to "authenticated";

grant select on table "public"."user_apps" to "authenticated";

grant trigger on table "public"."user_apps" to "authenticated";

grant truncate on table "public"."user_apps" to "authenticated";

grant update on table "public"."user_apps" to "authenticated";

grant delete on table "public"."user_apps" to "service_role";

grant insert on table "public"."user_apps" to "service_role";

grant references on table "public"."user_apps" to "service_role";

grant select on table "public"."user_apps" to "service_role";

grant trigger on table "public"."user_apps" to "service_role";

grant truncate on table "public"."user_apps" to "service_role";

grant update on table "public"."user_apps" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."app_categories"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."app_categories"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."categories"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."installable_apps"
as permissive
for select
to public
using (true);


create policy "Limit delete to just admins"
on "public"."installable_apps"
as restrictive
for delete
to postgres, supabase_admin
using (true);


create policy "Limit insert to just admins"
on "public"."installable_apps"
as restrictive
for insert
to postgres, supabase_admin
with check (true);


create policy "Limit update to just admins"
on "public"."installable_apps"
as restrictive
for update
to supabase_admin, postgres
using (true)
with check (true);


create policy "Enable delete for users based on user_id"
on "public"."profiles"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = id));


create policy "Enable insert for users based on user_id"
on "public"."profiles"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = id));


create policy "Enable update for users based on email"
on "public"."profiles"
as permissive
for update
to public
using (((( SELECT auth.jwt() AS jwt) ->> 'email'::text) = email))
with check (((( SELECT auth.jwt() AS jwt) ->> 'email'::text) = email));


create policy "Enable users to view their own data only"
on "public"."profiles"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = id));


create policy "Enable delete for users based on user_id"
on "public"."user_apps"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for authenticated users only"
on "public"."user_apps"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable users to view their own data only"
on "public"."user_apps"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));

{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { aiService } from '../services/aiService';\nexport var useChatStore = create(persist(function (set, get) {\n  return {\n    messages: [],\n    chatHistory: [],\n    currentChatId: null,\n    isGenerating: false,\n    modelStatus: 'initializing',\n    activeModelId: null,\n    availableModels: [],\n    error: null,\n    apiKey: \"\",\n    systemStats: {\n      cpu: 0,\n      memory: 0,\n      temperature: 0,\n      requests: 0\n    },\n    createNewChat: function createNewChat() {\n      var newChat = {\n        id: crypto.randomUUID(),\n        title: `New Chat`,\n        messages: [],\n        createdAt: Date.now(),\n        updatedAt: Date.now()\n      };\n      set(function (state) {\n        return {\n          chatHistory: [].concat(_toConsumableArray(state.chatHistory), [newChat]),\n          currentChatId: newChat.id,\n          messages: []\n        };\n      });\n    },\n    loadChat: function loadChat(chatId) {\n      var state = get();\n      var chat = state.chatHistory.find(function (c) {\n        return c.id === chatId;\n      });\n      if (chat) {\n        set({\n          currentChatId: chatId,\n          messages: _toConsumableArray(chat.messages)\n        });\n      }\n    },\n    deleteChat: function deleteChat(chatId) {\n      var state = get();\n      var newHistory = state.chatHistory.filter(function (c) {\n        return c.id !== chatId;\n      });\n      var isCurrentChat = state.currentChatId === chatId;\n      set({\n        chatHistory: newHistory,\n        currentChatId: isCurrentChat ? null : state.currentChatId,\n        messages: isCurrentChat ? [] : state.messages\n      });\n    },\n    updateChatTitle: function updateChatTitle(chatId, title) {\n      if (!title.trim()) return;\n      set(function (state) {\n        return {\n          chatHistory: state.chatHistory.map(function (chat) {\n            return chat.id === chatId ? _objectSpread(_objectSpread({}, chat), {}, {\n              title: title.trim(),\n              updatedAt: Date.now()\n            }) : chat;\n          })\n        };\n      });\n    },\n    initializeChat: function () {\n      var _initializeChat = _asyncToGenerator(function* () {\n        try {\n          if (!aiService.isConfigured()) {\n            set({\n              modelStatus: 'error',\n              error: 'AI service not configured'\n            });\n            return;\n          }\n          var models = yield aiService.getAvailableModels();\n          set({\n            availableModels: models,\n            modelStatus: 'ready',\n            error: null\n          });\n        } catch (error) {\n          console.error('Failed to initialize chat:', error);\n          set({\n            modelStatus: 'error',\n            error: error.message\n          });\n        }\n      });\n      function initializeChat() {\n        return _initializeChat.apply(this, arguments);\n      }\n      return initializeChat;\n    }(),\n    setApiKey: function () {\n      var _setApiKey = _asyncToGenerator(function* (apiKey) {\n        var provider = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'openai';\n        var baseUrl = arguments.length > 2 ? arguments[2] : undefined;\n        try {\n          yield aiService.configure({\n            provider: provider,\n            apiKey: apiKey,\n            baseUrl: baseUrl\n          });\n          var models = yield aiService.getAvailableModels();\n          set({\n            availableModels: models,\n            modelStatus: 'ready',\n            apiKey: apiKey,\n            apiProvider: provider,\n            baseUrl: baseUrl,\n            error: null\n          });\n        } catch (error) {\n          console.error('API connection error:', error);\n          set({\n            error: error.message || 'Failed to connect to API',\n            modelStatus: 'error'\n          });\n          throw error;\n        }\n      });\n      function setApiKey(_x) {\n        return _setApiKey.apply(this, arguments);\n      }\n      return setApiKey;\n    }(),\n    chat: function () {\n      var _chat = _asyncToGenerator(function* (content) {\n        var _get = get(),\n          activeModelId = _get.activeModelId,\n          currentChatId = _get.currentChatId;\n        if (!aiService.isConfigured()) {\n          throw new Error('Please configure AI service first');\n        }\n        if (!activeModelId) {\n          throw new Error('Please select a model first');\n        }\n        if (!currentChatId) {\n          throw new Error('Please create a new chat first');\n        }\n        var userMessage = {\n          role: 'user',\n          content: content,\n          timestamp: Date.now()\n        };\n        set(function (state) {\n          var updatedMessages = [].concat(_toConsumableArray(state.messages), [userMessage]);\n          var updatedHistory = state.chatHistory.map(function (chat) {\n            return chat.id === state.currentChatId ? _objectSpread(_objectSpread({}, chat), {}, {\n              messages: updatedMessages,\n              updatedAt: Date.now()\n            }) : chat;\n          });\n          return {\n            messages: updatedMessages,\n            chatHistory: updatedHistory,\n            isGenerating: true,\n            error: null\n          };\n        });\n        try {\n          var assistantMessage = {\n            role: 'assistant',\n            content: '',\n            timestamp: Date.now()\n          };\n          set(function (state) {\n            var updatedMessages = [].concat(_toConsumableArray(state.messages), [assistantMessage]);\n            var updatedHistory = state.chatHistory.map(function (chat) {\n              return chat.id === state.currentChatId ? _objectSpread(_objectSpread({}, chat), {}, {\n                messages: updatedMessages,\n                updatedAt: Date.now()\n              }) : chat;\n            });\n            return {\n              messages: updatedMessages,\n              chatHistory: updatedHistory\n            };\n          });\n          var fullResponse = '';\n          yield aiService.generateText(content, {\n            model: activeModelId,\n            stream: true,\n            onToken: function onToken(token) {\n              fullResponse += token;\n              set(function (state) {\n                var newMessages = _toConsumableArray(state.messages);\n                newMessages[newMessages.length - 1] = _objectSpread(_objectSpread({}, newMessages[newMessages.length - 1]), {}, {\n                  content: fullResponse,\n                  timestamp: Date.now()\n                });\n                var updatedHistory = state.chatHistory.map(function (chat) {\n                  return chat.id === state.currentChatId ? _objectSpread(_objectSpread({}, chat), {}, {\n                    messages: newMessages,\n                    updatedAt: Date.now()\n                  }) : chat;\n                });\n                return {\n                  messages: newMessages,\n                  chatHistory: updatedHistory\n                };\n              });\n            }\n          });\n          set({\n            isGenerating: false\n          });\n          var currentChat = get().chatHistory.find(function (c) {\n            return c.id === get().currentChatId;\n          });\n          if (currentChat && currentChat.messages.length === 3) {\n            yield get().summarizeAndTitleChat(currentChat.id);\n          }\n        } catch (error) {\n          console.error('Generation failed:', error);\n          var errorMessage = {\n            role: 'error',\n            content: error.message || 'Failed to generate response',\n            timestamp: Date.now()\n          };\n          set(function (state) {\n            var updatedMessages = [].concat(_toConsumableArray(state.messages), [errorMessage]);\n            var updatedHistory = state.chatHistory.map(function (chat) {\n              return chat.id === state.currentChatId ? _objectSpread(_objectSpread({}, chat), {}, {\n                messages: updatedMessages,\n                updatedAt: Date.now()\n              }) : chat;\n            });\n            return {\n              messages: updatedMessages,\n              chatHistory: updatedHistory,\n              isGenerating: false,\n              error: error.message || 'Failed to generate response'\n            };\n          });\n        }\n      });\n      function chat(_x2) {\n        return _chat.apply(this, arguments);\n      }\n      return chat;\n    }(),\n    setActiveModel: function setActiveModel(modelId) {\n      set({\n        activeModelId: modelId\n      });\n    },\n    clearChat: function clearChat() {\n      var _get2 = get(),\n        currentChatId = _get2.currentChatId;\n      if (currentChatId) {\n        set(function (state) {\n          return {\n            messages: [],\n            chatHistory: state.chatHistory.map(function (chat) {\n              return chat.id === currentChatId ? _objectSpread(_objectSpread({}, chat), {}, {\n                messages: [],\n                updatedAt: Date.now()\n              }) : chat;\n            })\n          };\n        });\n      }\n    },\n    updateSystemStats: function updateSystemStats(stats) {\n      set({\n        systemStats: stats\n      });\n    },\n    summarizeAndTitleChat: function () {\n      var _summarizeAndTitleChat = _asyncToGenerator(function* (chatId) {\n        var chat = get().chatHistory.find(function (c) {\n          return c.id === chatId;\n        });\n        if (!chat || chat.messages.length < 2) return;\n        var prompt = `Please provide a very brief title (maximum 4-5 words) for this conversation. Here's the chat history:\n          ${chat.messages.map(function (m) {\n          return `${m.role}: ${m.content}`;\n        }).join('\\n')}`;\n        try {\n          var title = yield aiService.generateText(prompt, {\n            model: get().activeModelId || 'gpt-3.5-turbo',\n            maxTokens: 20,\n            temperature: 0.7\n          });\n          var cleanTitle = title.replace(/[\"']/g, '').trim();\n          set(function (state) {\n            return {\n              chatHistory: state.chatHistory.map(function (c) {\n                return c.id === chatId ? _objectSpread(_objectSpread({}, chat), {}, {\n                  title: cleanTitle,\n                  updatedAt: Date.now()\n                }) : c;\n              })\n            };\n          });\n        } catch (error) {\n          console.error('Failed to generate chat title:', error);\n        }\n      });\n      function summarizeAndTitleChat(_x3) {\n        return _summarizeAndTitleChat.apply(this, arguments);\n      }\n      return summarizeAndTitleChat;\n    }()\n  };\n}, {\n  name: 'chat-storage',\n  partialize: function partialize(state) {\n    return {\n      chatHistory: state.chatHistory,\n      apiKey: state.apiKey,\n      anthropicKey: state.anthropicKey,\n      apiProvider: state.apiProvider,\n      baseUrl: state.baseUrl,\n      activeModelId: state.activeModelId\n    };\n  }\n}));","map":{"version":3,"names":["create","persist","aiService","useChatStore","set","get","messages","chatHistory","currentChatId","isGenerating","modelStatus","activeModelId","availableModels","error","apiKey","systemStats","cpu","memory","temperature","requests","createNewChat","newChat","id","crypto","randomUUID","title","createdAt","Date","now","updatedAt","state","concat","_toConsumableArray","loadChat","chatId","chat","find","c","deleteChat","newHistory","filter","isCurrentChat","updateChatTitle","trim","map","_objectSpread","initializeChat","_initializeChat","_asyncToGenerator","isConfigured","models","getAvailableModels","console","message","apply","arguments","setApiKey","_setApiKey","provider","length","undefined","baseUrl","configure","apiProvider","_x","_chat","content","_get","Error","userMessage","role","timestamp","updatedMessages","updatedHistory","assistantMessage","fullResponse","generateText","model","stream","onToken","token","newMessages","currentChat","summarizeAndTitleChat","errorMessage","_x2","setActiveModel","modelId","clearChat","_get2","updateSystemStats","stats","_summarizeAndTitleChat","prompt","m","join","maxTokens","cleanTitle","replace","_x3","name","partialize","anthropicKey"],"sources":["/home/project/src/store/useChatStore.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { aiService, type Model, type Provider } from '../services/aiService';\n\ninterface SystemStats {\n    cpu: number;\n    memory: number;\n    temperature: number;\n    requests: number;\n}\n\ninterface Message {\n    role: \"system\" | \"user\" | \"assistant\" | \"error\";\n    content: string;\n    timestamp?: number;\n}\n\ninterface ChatHistory {\n    id: string;\n    title: string;\n    messages: Message[];\n    createdAt: number;\n    updatedAt: number;\n}\n\ninterface ChatStore {\n    messages: Message[];\n    chatHistory: ChatHistory[];\n    currentChatId: string | null;\n    isGenerating: boolean;\n    modelStatus: string;\n    activeModelId: string | null;\n    error: string | null;\n    availableModels: Model[];\n    systemStats: SystemStats;\n    apiKey: string;\n    anthropicKey?: string;\n    apiProvider?: Provider;\n    baseUrl?: string;\n    initializeChat: () => Promise<void>;\n    setApiKey: (apiKey: string, provider?: Provider, baseUrl?: string) => Promise<void>;\n    chat: (content: string) => Promise<void>;\n    setActiveModel: (modelId: string) => void;\n    clearChat: () => void;\n    updateSystemStats: (stats: SystemStats) => void;\n    createNewChat: () => void;\n    loadChat: (chatId: string) => void;\n    deleteChat: (chatId: string) => void;\n    updateChatTitle: (chatId: string, title: string) => void;\n    summarizeAndTitleChat: (chatId: string) => Promise<void>;\n}\n\nexport const useChatStore = create<ChatStore>(\n  persist(\n    (set, get) => ({\n      messages: [],\n      chatHistory: [],\n      currentChatId: null,\n      isGenerating: false,\n      modelStatus: 'initializing',\n      activeModelId: null,\n      availableModels: [],\n      error: null,\n      apiKey: \"\",\n      systemStats: {\n        cpu: 0,\n        memory: 0,\n        temperature: 0,\n        requests: 0\n      },\n\n      createNewChat: () => {\n        const newChat: ChatHistory = {\n          id: crypto.randomUUID(),\n          title: `New Chat`,\n          messages: [],\n          createdAt: Date.now(),\n          updatedAt: Date.now(),\n        };\n\n        set((state) => ({\n          chatHistory: [...state.chatHistory, newChat],\n          currentChatId: newChat.id,\n          messages: []\n        }));\n      },\n\n      loadChat: (chatId: string) => {\n        const state = get();\n        const chat = state.chatHistory.find((c) => c.id === chatId);\n        if (chat) {\n          set({\n            currentChatId: chatId,\n            messages: [...chat.messages]\n          });\n        }\n      },\n\n      deleteChat: (chatId: string) => {\n        const state = get();\n        const newHistory = state.chatHistory.filter((c) => c.id !== chatId);\n        const isCurrentChat = state.currentChatId === chatId;\n        \n        set({\n          chatHistory: newHistory,\n          currentChatId: isCurrentChat ? null : state.currentChatId,\n          messages: isCurrentChat ? [] : state.messages\n        });\n      },\n\n      updateChatTitle: (chatId: string, title: string) => {\n        if (!title.trim()) return;\n        \n        set((state) => ({\n          chatHistory: state.chatHistory.map((chat) =>\n            chat.id === chatId\n              ? { ...chat, title: title.trim(), updatedAt: Date.now() }\n              : chat\n          )\n        }));\n      },\n\n      initializeChat: async () => {\n        try {\n          if (!aiService.isConfigured()) {\n            set({ modelStatus: 'error', error: 'AI service not configured' });\n            return;\n          }\n\n          const models = await aiService.getAvailableModels();\n          set({ \n            availableModels: models,\n            modelStatus: 'ready',\n            error: null\n          });\n        } catch (error) {\n          console.error('Failed to initialize chat:', error);\n          set({ \n            modelStatus: 'error',\n            error: error.message \n          });\n        }\n      },\n\n      setApiKey: async (apiKey, provider: Provider = 'openai', baseUrl?: string) => {\n        try {\n          await aiService.configure({ provider, apiKey, baseUrl });\n          const models = await aiService.getAvailableModels();\n          \n          set({ \n            availableModels: models,\n            modelStatus: 'ready',\n            apiKey: apiKey,\n            apiProvider: provider,\n            baseUrl: baseUrl,\n            error: null\n          });\n        } catch (error) {\n          console.error('API connection error:', error);\n          set({ \n            error: error.message || 'Failed to connect to API',\n            modelStatus: 'error' \n          });\n          throw error;\n        }\n      },\n\n      chat: async (content) => {\n        const { activeModelId, currentChatId } = get();\n        \n        if (!aiService.isConfigured()) {\n          throw new Error('Please configure AI service first');\n        }\n\n        if (!activeModelId) {\n          throw new Error('Please select a model first');\n        }\n\n        if (!currentChatId) {\n          throw new Error('Please create a new chat first');\n        }\n\n        const userMessage: Message = { \n          role: 'user', \n          content,\n          timestamp: Date.now()\n        };\n\n        // Add user message\n        set(state => {\n          const updatedMessages = [...state.messages, userMessage];\n          const updatedHistory = state.chatHistory.map(chat => \n            chat.id === state.currentChatId\n              ? { ...chat, messages: updatedMessages, updatedAt: Date.now() }\n              : chat\n          );\n\n          return { \n            messages: updatedMessages,\n            chatHistory: updatedHistory,\n            isGenerating: true,\n            error: null\n          };\n        });\n\n        try {\n          // Create initial assistant message\n          const assistantMessage: Message = {\n            role: 'assistant',\n            content: '',\n            timestamp: Date.now()\n          };\n\n          // Add empty assistant message to start\n          set(state => {\n            const updatedMessages = [...state.messages, assistantMessage];\n            const updatedHistory = state.chatHistory.map(chat => \n              chat.id === state.currentChatId\n                ? { ...chat, messages: updatedMessages, updatedAt: Date.now() }\n                : chat\n            );\n\n            return {\n              messages: updatedMessages,\n              chatHistory: updatedHistory\n            };\n          });\n\n          let fullResponse = '';\n          await aiService.generateText(content, {\n            model: activeModelId,\n            stream: true,\n            onToken: (token) => {\n              fullResponse += token;\n              \n              // Update the last message (assistant's message)\n              set(state => {\n                const newMessages = [...state.messages];\n                newMessages[newMessages.length - 1] = {\n                  ...newMessages[newMessages.length - 1],\n                  content: fullResponse,\n                  timestamp: Date.now()\n                };\n\n                const updatedHistory = state.chatHistory.map(chat => \n                  chat.id === state.currentChatId\n                    ? { ...chat, messages: newMessages, updatedAt: Date.now() }\n                    : chat\n                );\n\n                return {\n                  messages: newMessages,\n                  chatHistory: updatedHistory\n                };\n              });\n            }\n          });\n\n          set({ isGenerating: false });\n\n          // Generate title after the first exchange\n          const currentChat = get().chatHistory.find(c => c.id === get().currentChatId);\n          if (currentChat && currentChat.messages.length === 3) {\n            await get().summarizeAndTitleChat(currentChat.id);\n          }\n\n        } catch (error) {\n          console.error('Generation failed:', error);\n          const errorMessage: Message = { \n            role: 'error', \n            content: error.message || 'Failed to generate response',\n            timestamp: Date.now()\n          };\n\n          set(state => {\n            const updatedMessages = [...state.messages, errorMessage];\n            const updatedHistory = state.chatHistory.map(chat => \n              chat.id === state.currentChatId\n                ? { ...chat, messages: updatedMessages, updatedAt: Date.now() }\n                : chat\n            );\n\n            return { \n              messages: updatedMessages,\n              chatHistory: updatedHistory,\n              isGenerating: false,\n              error: error.message || 'Failed to generate response'\n            };\n          });\n        }\n      },\n\n      setActiveModel: (modelId) => {\n        set({ activeModelId: modelId });\n      },\n\n      clearChat: () => {\n        const { currentChatId } = get();\n        if (currentChatId) {\n          set(state => ({\n            messages: [],\n            chatHistory: state.chatHistory.map(chat => \n              chat.id === currentChatId\n                ? { ...chat, messages: [], updatedAt: Date.now() }\n                : chat\n            )\n          }));\n        }\n      },\n\n      updateSystemStats: (stats) => {\n        set({ systemStats: stats });\n      },\n\n      summarizeAndTitleChat: async (chatId: string) => {\n        const chat = get().chatHistory.find((c) => c.id === chatId);\n        if (!chat || chat.messages.length < 2) return;\n\n        const prompt = `Please provide a very brief title (maximum 4-5 words) for this conversation. Here's the chat history:\n          ${chat.messages.map(m => `${m.role}: ${m.content}`).join('\\n')}`;\n\n        try {\n          const title = await aiService.generateText(prompt, {\n            model: get().activeModelId || 'gpt-3.5-turbo',\n            maxTokens: 20,\n            temperature: 0.7\n          });\n\n          const cleanTitle = title.replace(/[\"']/g, '').trim();\n\n          set((state) => ({\n            chatHistory: state.chatHistory.map((c) =>\n              c.id === chatId\n                ? { ...chat, title: cleanTitle, updatedAt: Date.now() }\n                : c\n            ),\n          }));\n        } catch (error) {\n          console.error('Failed to generate chat title:', error);\n        }\n      }\n    }),\n    {\n      name: 'chat-storage',\n      partialize: (state) => ({\n        chatHistory: state.chatHistory,\n        apiKey: state.apiKey,\n        anthropicKey: state.anthropicKey,\n        apiProvider: state.apiProvider,\n        baseUrl: state.baseUrl,\n        activeModelId: state.activeModelId\n      })\n    }\n  )\n);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
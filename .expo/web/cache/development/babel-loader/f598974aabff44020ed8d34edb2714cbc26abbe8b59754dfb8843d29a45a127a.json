{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport supabase from '../services/supabaseService';\nexport var useAppStore = create()(persist(function (set, get) {\n  return {\n    installableApps: [],\n    installedApps: [],\n    loading: false,\n    categories: [],\n    fetchInstallableApps: function () {\n      var _fetchInstallableApps = _asyncToGenerator(function* () {\n        set({\n          loading: true\n        });\n        var _yield$supabase$from$ = yield supabase.from('installable_apps').select('*').returns(),\n          data = _yield$supabase$from$.data,\n          error = _yield$supabase$from$.error;\n        if (error) {\n          console.error('Error retrieving apps for the app store:', error);\n          set({\n            loading: false\n          });\n          throw error;\n        }\n        set({\n          loading: false\n        });\n        set({\n          installableApps: data || []\n        });\n      });\n      function fetchInstallableApps() {\n        return _fetchInstallableApps.apply(this, arguments);\n      }\n      return fetchInstallableApps;\n    }(),\n    fetchInstalledApps: function () {\n      var _fetchInstalledApps = _asyncToGenerator(function* (user_id) {\n        set({\n          loading: true\n        });\n        var _yield$supabase$from$2 = yield supabase.from('user_apps').select('installable_apps!inner(*)').eq('user_id', user_id),\n          data = _yield$supabase$from$2.data,\n          error = _yield$supabase$from$2.error;\n        if (error) {\n          console.error('Error retrieving apps for user:', error);\n          set({\n            loading: false\n          });\n          throw error;\n        }\n        set({\n          loading: false\n        });\n        var t = data.map(function (item) {\n          return item.installable_apps;\n        });\n        set({\n          installedApps: t || []\n        });\n      });\n      function fetchInstalledApps(_x) {\n        return _fetchInstalledApps.apply(this, arguments);\n      }\n      return fetchInstalledApps;\n    }(),\n    fetchCategories: function () {\n      var _fetchCategories = _asyncToGenerator(function* () {});\n      function fetchCategories() {\n        return _fetchCategories.apply(this, arguments);\n      }\n      return fetchCategories;\n    }(),\n    installApp: function () {\n      var _installApp = _asyncToGenerator(function* (user_id, app_id) {\n        set({\n          loading: true\n        });\n        var _yield$supabase$from$3 = yield supabase.from('user_apps').insert({\n            user_id: user_id,\n            app_id: app_id\n          }),\n          error = _yield$supabase$from$3.error;\n        if (error) {\n          console.error('Error installing app:', error);\n          set({\n            loading: false\n          });\n          throw error;\n        }\n        set({\n          loading: false\n        });\n        var app = get().installableApps.find(function (app) {\n          return app.id === app_id;\n        });\n        if (app) {\n          set({\n            installedApps: [].concat(_toConsumableArray(get().installedApps), [app])\n          });\n        }\n      });\n      function installApp(_x2, _x3) {\n        return _installApp.apply(this, arguments);\n      }\n      return installApp;\n    }(),\n    uninstallApp: function () {\n      var _uninstallApp = _asyncToGenerator(function* (user_id, app_id) {\n        set({\n          loading: true\n        });\n        var app = get().installedApps.find(function (app) {\n          return app.id === app_id;\n        });\n        if (app) {\n          var _yield$supabase$from$4 = yield supabase.from('user_apps').delete().eq('app_id', app_id).eq('user_id', user_id),\n            error = _yield$supabase$from$4.error;\n          if (error) {\n            console.error('Error uninstalling app:', error);\n            set({\n              loading: false\n            });\n            throw error;\n          }\n          set({\n            installedApps: get().installedApps.filter(function (app) {\n              return app.id !== app_id;\n            })\n          });\n        }\n        set({\n          loading: false\n        });\n      });\n      function uninstallApp(_x4, _x5) {\n        return _uninstallApp.apply(this, arguments);\n      }\n      return uninstallApp;\n    }()\n  };\n}, {\n  name: 'app-storage'\n}));","map":{"version":3,"names":["create","persist","supabase","useAppStore","set","get","installableApps","installedApps","loading","categories","fetchInstallableApps","_fetchInstallableApps","_asyncToGenerator","_yield$supabase$from$","from","select","returns","data","error","console","apply","arguments","fetchInstalledApps","_fetchInstalledApps","user_id","_yield$supabase$from$2","eq","t","map","item","installable_apps","_x","fetchCategories","_fetchCategories","installApp","_installApp","app_id","_yield$supabase$from$3","insert","app","find","id","concat","_toConsumableArray","_x2","_x3","uninstallApp","_uninstallApp","_yield$supabase$from$4","delete","filter","_x4","_x5","name"],"sources":["/home/project/src/store/useAppStore.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport supabase from '../services/supabaseService';\nimport { App } from '../types';\n\ninterface AppStore {\n  installableApps: App[];\n  installedApps: App[];\n  loading: boolean;\n  categories: string[];\n  fetchInstallableApps: () => Promise<void>;\n  fetchInstalledApps: (user_id: string) => Promise<void>;\n  fetchCategories: () => Promise<void>;\n  installApp: (user_id: string, app_id: string) => Promise<void>;\n  uninstallApp: (user_id: string, app_id: string) => Promise<void>;\n}\n\nexport const useAppStore = create<AppStore>()(\n  persist(\n    (set, get) => ({\n      installableApps: [],\n      installedApps: [],\n      loading: false,\n      categories: [],\n\n      fetchInstallableApps: async () => {\n        set({ loading: true });\n        const { data, error } = await supabase.from('installable_apps').select('*').returns<App[]>();\n\n        if (error) {\n          console.error('Error retrieving apps for the app store:', error);\n          set({ loading: false });\n          throw error;\n        }\n        set({ loading: false });\n\n        set({ installableApps: data || [] });\n      },\n\n      fetchInstalledApps: async (user_id: string) => {\n        set({ loading: true });\n        const { data, error } = await supabase\n          .from('user_apps')\n          .select('installable_apps!inner(*)')\n          .eq('user_id', user_id);\n        if (error) {\n          console.error('Error retrieving apps for user:', error);\n          set({ loading: false });\n          throw error;\n        }\n        set({ loading: false });\n\n        const t = data.map((item) => item.installable_apps);\n        set({ installedApps: t || [] });\n      },\n\n      fetchCategories: async () => {},\n\n      installApp: async (user_id: string, app_id: string) => {\n        set({ loading: true });\n        const { error } = await supabase.from('user_apps').insert({ user_id: user_id, app_id: app_id });\n        if (error) {\n          console.error('Error installing app:', error);\n          set({ loading: false });\n          throw error;\n        }\n        set({ loading: false });\n\n        const app = get().installableApps.find((app) => app.id === app_id);\n        if (app) {\n          set({ installedApps: [...get().installedApps, app] });\n        }\n      },\n\n      uninstallApp: async (user_id: string, app_id: string) => {\n        set({ loading: true });\n        const app = get().installedApps.find((app) => app.id === app_id);\n        if (app) {\n          const { error } = await supabase.from('user_apps').delete().eq('app_id', app_id).eq('user_id', user_id);\n          if (error) {\n            console.error('Error uninstalling app:', error);\n            set({ loading: false });\n            throw error;\n          }\n\n          set({\n            installedApps: get().installedApps.filter((app) => app.id !== app_id),\n          });\n        }\n        set({ loading: false });\n      },\n    }),\n    { name: 'app-storage' },\n  ),\n);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}